name = 'laptop_core_temperature'
#influx: host TAG
host = 'spongebob'
#future_use
work_dir = '/home/conan/soft/rust/ts'


[flag]
debug_new_config = false

debug_ts = false
#future_use
debug_ts_to_dt = false

debug_sensor_output = false
debug_sensor_instances = false

debug_pointer_output = false

debug_influx_uri = true # false
debug_influx_auth = false
debug_influx_lp = true # false
debug_influx_output = false
debug_influx_instances = false

run_flux_verify_record = false
add_flux_query_verify_record_suffix = true # false
debug_flux_query = false
debug_flux_result = true # false

run_egrep = false
debug_egrep = true # false


#future_use
[delay]
second = 60
minute = 1


#vector of influx: Struct instances
[all_influx]
#name: "default"		-> instance_id
#status: true			-> on/off

#secure: 			-> http/https 
#server: "ruth"			-> ip or hostname
#port: 8086

#bucket: "test_rust"		-> DO NOT FORGET TO CREATE
#token	 			-> TOKEN
#org: "foookin_paavel"
#precision: "ms"		-> 1636918801582 / MS format len() 13

#measurement: "temperature"

#TAGS
#machine_id: "spongebob"	-> now same as host but normaly another machine like T4_labjack / esp32 / ...
#carrier: "cargo" 	     	-> future_use
#flag_valid_default:  true	-> for flux filtering invalid data before delete

#DO NOT BREAK LINES IN Struct AS IT WILL !panic
values = [
       {name = "default", status = true, secure = "https", server = "ruth", port = 8086, bucket = "test_rust", token = "riMIsymqgtxF6vGnTfhpSCWPcijRRQ2ekwbS5H8BkPXHr_HtCNUqKLwOnyHpMjQB-L6ZscVFo8PsGbGgoxEFLw==", org = "foookin_paavel", precision = "ms", measurement = "temperature", machine_id = "spongebob", carrier = "cargo", flag_valid_default = true},
       {name = "backup", status = true, secure = "http", server = "jozefina", port = 8086, bucket = "backup_test_rust", token = "jbD0MXwVzetW6r6TFSQ5xIAzSFxwl3rD8tJVvzWr_Ax7ZNBJH1A0LHu38PR8WFWEpy0SuDlYpMyjYBB52riFrA==", org = "foookin_paavel", precision = "ms", measurement = "temperature", machine_id = "spongebob", carrier = "cargo", flag_valid_default = true}]


#vector of sensor: Struct instances
[all_sensors]
#status: on/off
#name: influx SensorId TAG
#pointer: json path / influx TemperatureDecimal FIELD

#DO NOT BREAK LINES IN Struct AS IT WILL !panic
values = [
       {status=true, name="0", pointer="/coretemp-isa-0000/Core 0/temp2_input"},
       {status=true, name="1", pointer="/coretemp-isa-0000/Core 1/temp3_input"},
       {status=true, name="2", pointer="/acpitz-acpi-0/temp2/temp2_input"},
       {status=true, name="3", pointer="/acpitz-acpi-0/temp1/temp1_input"},
]


[template]
[template.sensors]
program = "/usr/bin/sensors"
param_1 = "-j"

[template.curl]
program = "/usr/bin/curl"
param_insecure = "--insecure"
param_request = "--request"
param_post = "POST"
param_header = "--header"
param_data = "--data-raw"

influx_uri_api = "{secure}://{server}:{port}/api/v2/"
influx_uri_write = "write?org={org}&bucket={bucket}&precision={precision}"
influx_uri_query = "query?org={org}"

influx_auth = "Authorization: Token {token}"
influx_accept = "Accept: application/csv"
influx_content = "Content-type: application/vnd.flux"

influx_lp = "{measurement},host={host},Machine={machine_id},SensorId={sensor_id},SensorCarrier={sensor_carrier},SensorValid={sensor_valid} TemperatureDecimal={temperature_decimal} {ts}"

[template.flux]
query_verify_record_range_start = "-1h"

query_verify_record = "from(bucket: \"{bucket}\") |> range(start: {start}) |> filter(fn: (r) => r[\"_measurement\"] == \"{measurement}\") |> filter(fn: (r) => r[\"SensorId\"] == \"{sensor_id}\") |> filter(fn: (r) => r[\"_time\"] == {dtif}) |> sort(columns: [\"_time\"], desc:true) |> drop(columns:[\"_start\", \"_stop\", \"host\", \"_measurement\",\"SensorCarrier\", \"SensorValid\", \"_field\"]) |> limit(n:1) |> group()"

query_verify_record_suffix = " |> count()"


#/usr/bin/curl --insecure --request POST https://ruth:8086/api/v2/query?org=foookin_paavel --header 'Authorization: Token riMIsymqgtxF6vGnTfhpSCWPcijRRQ2ekwbS5H8BkPXHr_HtCNUqKLwOnyHpMjQB-L6ZscVFo8PsGbGgoxEFLw==' --header 'Accept: application/csv' --header 'Content-type: application/vnd.flux' --data 'from(bucket: "test_rust") |> range(start: -6h) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["SensorId"] == "0") |> filter(fn: (r) => r["_value"] == 54.0) |> filter(fn: (r) => r["_time"] == 2021-11-16T11:43:43.871Z) |> sort(columns: ["_time"], desc:true) |> drop(columns:["_start", "_stop", "host", "_measurement","SensorCarrier", "SensorValid", "_field"]) |> limit(n:1) |> group()'

#,result,table,_time,_value,Machine,SensorId
#,_result,0,2021-11-16T11:43:43.871Z,54,spongebob,0

#/usr/bin/curl --insecure --request POST https://ruth:8086/api/v2/query?org=foookin_paavel --header 'Authorization: Token riMIsymqgtxF6vGnTfhpSCWPcijRRQ2ekwbS5H8BkPXHr_HtCNUqKLwOnyHpMjQB-L6ZscVFo8PsGbGgoxEFLw==' --header 'Accept: application/csv' --header 'Content-type: application/vnd.flux' --data 'from(bucket: "test_rust") |> range(start: -6h) |> filter(fn: (r) => r["_measurement"] == "temperature") |> filter(fn: (r) => r["SensorId"] == "0") |> filter(fn: (r) => r["_value"] == 54.0) |> filter(fn: (r) => r["_time"] == 2021-11-16T11:43:43.871Z) |> sort(columns: ["_time"], desc:true) |> drop(columns:["_start", "_stop", "host", "_measurement","SensorCarrier", "SensorValid", "_field"]) |> limit(n:1) |> group() |> count()'

#,result,table,_value
#,_result,0,1